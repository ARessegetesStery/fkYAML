if(MSVC)
  if(CMAKE_CXX_FLAGS MATCHES "/W[0-4]")
    string(REGEX REPLACE "/W[0-4]" "/W4" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
  else()
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /W4")
  endif()
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /EHsc /utf-8 /permissive-")
  set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /Z7")
  set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /Od")
else()
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall")
endif()
set(CMAKE_CXX_STANDARD 11)

set(TEST_TARGET "fkYAMLUnitTest")

add_executable(${TEST_TARGET}
  DeserializerTest.cpp
  LexicalAnalyzerTest.cpp
  NodeClassTest.cpp
  main.cpp
)

target_include_directories(${TEST_TARGET} PRIVATE
  ${PROJECT_SOURCE_DIR}/include
  ${CMAKE_CURRENT_SOURCE_DIR}
)

function(add_unit_test CLASS_NAME FUNC_NAME TARGET_NAME ID)
  set(TEST_NAME ${CLASS_NAME}_${FUNC_NAME})
  add_test(NAME ${TEST_NAME} COMMAND $<TARGET_FILE:${TARGET_NAME}> ${ID})
  set_tests_properties(${TEST_NAME} PROPERTIES LABELS ${CLASS_NAME})
endfunction()

add_unit_test(NodeClassTest DefaultCtorTest                        ${TEST_TARGET} 0x0000)
add_unit_test(NodeClassTest SequenceTypeCtorTest                   ${TEST_TARGET} 0x0001)
add_unit_test(NodeClassTest MappingTypeCtorTest                    ${TEST_TARGET} 0x0002)
add_unit_test(NodeClassTest NullTypeCtorTest                       ${TEST_TARGET} 0x0003)
add_unit_test(NodeClassTest BooleanTypeCtorTest                    ${TEST_TARGET} 0x0004)
add_unit_test(NodeClassTest SignedIntTypeCtorTest                  ${TEST_TARGET} 0x0005)
add_unit_test(NodeClassTest UnsignedIntTypeCtorTest                ${TEST_TARGET} 0x0006)
add_unit_test(NodeClassTest FloatNumberTypeCtorTest                ${TEST_TARGET} 0x0007)
add_unit_test(NodeClassTest StringTypeCtorTest                     ${TEST_TARGET} 0x0008)
add_unit_test(NodeClassTest EmptySequenceNodeFactoryTest           ${TEST_TARGET} 0x0009)
add_unit_test(NodeClassTest LvalueSequenceNodeFactoryTest          ${TEST_TARGET} 0x000A)
add_unit_test(NodeClassTest RvalueSequenceNodeFactoryTest          ${TEST_TARGET} 0x000B)
add_unit_test(NodeClassTest EmptyMappingNodeFactoryTest            ${TEST_TARGET} 0x000C)
add_unit_test(NodeClassTest LvalueMappingNodeFactoryTest           ${TEST_TARGET} 0x000D)
add_unit_test(NodeClassTest RvalueMappingNodeFactoryTest           ${TEST_TARGET} 0x000E)
add_unit_test(NodeClassTest BoolNodeFactoryTest                    ${TEST_TARGET} 0x000F)
add_unit_test(NodeClassTest SignedIntegerNodeFactoryTest           ${TEST_TARGET} 0x0010)
add_unit_test(NodeClassTest UnsignedIntegerNodeFactoryTest         ${TEST_TARGET} 0x0011)
add_unit_test(NodeClassTest FloatNumberNodeFactoryTest             ${TEST_TARGET} 0x0012)
add_unit_test(NodeClassTest EmptyStringNodeFactoryTest             ${TEST_TARGET} 0x0013)
add_unit_test(NodeClassTest LvalueStringNodeFactoryTest            ${TEST_TARGET} 0x0014)
add_unit_test(NodeClassTest RvalueStringNodeFactoryTest            ${TEST_TARGET} 0x0015)
add_unit_test(NodeClassTest LvalueStringSubscriptOperatorTest      ${TEST_TARGET} 0x0016)
add_unit_test(NodeClassTest ConstLvalueStringSubscriptOperatorTest ${TEST_TARGET} 0x0017)
add_unit_test(NodeClassTest RvalueStringSubscriptOperatorTest      ${TEST_TARGET} 0x0018)
add_unit_test(NodeClassTest ConstRvalueStringSubscriptOperatorTest ${TEST_TARGET} 0x0019)
add_unit_test(NodeClassTest IntegerSubscriptOperatorTest           ${TEST_TARGET} 0x001A)
add_unit_test(NodeClassTest ConstIntegerSubscriptOperatorTest      ${TEST_TARGET} 0x001B)
add_unit_test(NodeClassTest SequenceForLoopTest                    ${TEST_TARGET} 0x001C)
add_unit_test(NodeClassTest ConstSequenceForLoopTest               ${TEST_TARGET} 0x001D)

add_unit_test(LexicalAnalyzerTest ScanNullTest1                       ${TEST_TARGET} 0x0100)
add_unit_test(LexicalAnalyzerTest ScanNullTest2                       ${TEST_TARGET} 0x0101)
add_unit_test(LexicalAnalyzerTest ScanNullTest3                       ${TEST_TARGET} 0x0102)
add_unit_test(LexicalAnalyzerTest ScanNullTest4                       ${TEST_TARGET} 0x0103)
add_unit_test(LexicalAnalyzerTest ScanTrueBooleanTest1                ${TEST_TARGET} 0x0104)
add_unit_test(LexicalAnalyzerTest ScanTrueBooleanTest2                ${TEST_TARGET} 0x0105)
add_unit_test(LexicalAnalyzerTest ScanTrueBooleanTest3                ${TEST_TARGET} 0x0106)
add_unit_test(LexicalAnalyzerTest ScanFalseBooleanTest1               ${TEST_TARGET} 0x0107)
add_unit_test(LexicalAnalyzerTest ScanFalseBooleanTest2               ${TEST_TARGET} 0x0108)
add_unit_test(LexicalAnalyzerTest ScanFalseBooleanTest3               ${TEST_TARGET} 0x0109)
add_unit_test(LexicalAnalyzerTest ScanDecimalSignedIntegerTest        ${TEST_TARGET} 0x010A)
add_unit_test(LexicalAnalyzerTest ScanUnsignedDecimalIntegerTest      ${TEST_TARGET} 0x010B)
add_unit_test(LexicalAnalyzerTest ScanOctalIntegerTest                ${TEST_TARGET} 0x010C)
add_unit_test(LexicalAnalyzerTest ScanHexadecimalIntegerTest          ${TEST_TARGET} 0x010D)
add_unit_test(LexicalAnalyzerTest ScanSignedFloatNumberTest           ${TEST_TARGET} 0x010E)
add_unit_test(LexicalAnalyzerTest ScanUnsignedFloatNumberTest         ${TEST_TARGET} 0x010F)
add_unit_test(LexicalAnalyzerTest ScanFloatNumberWithExponentTest     ${TEST_TARGET} 0x0110)
add_unit_test(LexicalAnalyzerTest ScanPositiveInfinityTest1           ${TEST_TARGET} 0x0111)
add_unit_test(LexicalAnalyzerTest ScanPositiveInfinityTest2           ${TEST_TARGET} 0x0112)
add_unit_test(LexicalAnalyzerTest ScanPositiveInfinityTest3           ${TEST_TARGET} 0x0113)
add_unit_test(LexicalAnalyzerTest ScanNegativeInfinityTest1           ${TEST_TARGET} 0x0114)
add_unit_test(LexicalAnalyzerTest ScanNegativeInfinityTest2           ${TEST_TARGET} 0x0115)
add_unit_test(LexicalAnalyzerTest ScanNegativeInfinityTest3           ${TEST_TARGET} 0x0116)
add_unit_test(LexicalAnalyzerTest ScanNaNTest1                        ${TEST_TARGET} 0x0117)
add_unit_test(LexicalAnalyzerTest ScanNaNTest2                        ${TEST_TARGET} 0x0118)
add_unit_test(LexicalAnalyzerTest ScanNaNTest3                        ${TEST_TARGET} 0x0119)
add_unit_test(LexicalAnalyzerTest ScanDoubleQuotedEmptyStringTest     ${TEST_TARGET} 0x011A)
add_unit_test(LexicalAnalyzerTest ScanSingleQuotedEmptyStringTest     ${TEST_TARGET} 0x011B)
add_unit_test(LexicalAnalyzerTest ScanKeyBooleanValuePairTest         ${TEST_TARGET} 0x011C)
add_unit_test(LexicalAnalyzerTest ScanKeySignedIntegerValuePairTest   ${TEST_TARGET} 0x011D)
add_unit_test(LexicalAnalyzerTest ScanKeyUnsignedIntegerValuePairTest ${TEST_TARGET} 0x011E)
add_unit_test(LexicalAnalyzerTest ScanKeyFloatNumberValuePairTest     ${TEST_TARGET} 0x011F)
add_unit_test(LexicalAnalyzerTest ScanKeyStringValuePairTest          ${TEST_TARGET} 0x0120)
add_unit_test(LexicalAnalyzerTest ScanFlowSequenceObject1             ${TEST_TARGET} 0x0121)
add_unit_test(LexicalAnalyzerTest ScanFlowSequenceObject2             ${TEST_TARGET} 0x0122)
add_unit_test(LexicalAnalyzerTest ScanFlowMappingObject               ${TEST_TARGET} 0x0123)
add_unit_test(LexicalAnalyzerTest ScanBlockSequenceObject1            ${TEST_TARGET} 0x0124)
add_unit_test(LexicalAnalyzerTest ScanBlockSequenceObject2            ${TEST_TARGET} 0x0125)

add_unit_test(DeserializerTest DeserializeFlowSequenceObject1 ${TEST_TARGET} 0x0200)
add_unit_test(DeserializerTest DeserializeFlowMappingObject1  ${TEST_TARGET} 0x0201)
